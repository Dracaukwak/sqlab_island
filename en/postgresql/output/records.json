{
  "info": {
    "adventure_count": 1,
    "episode_count": 30,
    "exercise_count": 0
  },
  "042": {
    "kind": "episode",
    "counter": 1,
    "context": "\nOh dear, what happened? It seems that I am the only survivor of the air crash. Wow, there are some villages on this island.\n\n```sql\nSELECT *\nFROM village\n```",
    "statement": "Copy-paste the previous query. After the star `*`, add a comma and the given formula. Execute the complete query.",
    "salt": "042",
    "formula": "salt_042(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM village",
        "result_head": "<table>\n    <tr>\n        <th>villageid</th>\n        <th>name</th>\n        <th>chief</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Monkeycity</td>\n        <td>1</td>\n        <td>761729108008</td>\n        <td>279644058721993</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Cucumbertown</td>\n        <td>6</td>\n        <td>690325653982</td>\n        <td>279644058721993</td>\n    </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "279644058721993"
      }
    ],
    "adventure": 1
  },
  "279644058721993": {
    "kind": "episode",
    "counter": 2,
    "context": "It seems there are a few people living in these villages.",
    "statement": "How can you see a list of all inhabitants?",
    "salt": "002",
    "formula": "salt_002(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Paul Bakerman</td>\n        <td>1</td>\n        <td>m</td>\n        <td>baker</td>\n        <td>850</td>\n        <td>friendly</td>\n        <td>894147374131</td>\n        <td>130877018053621</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>130877018053621</td>\n    </tr>\n</table>\nTotal: 19 rows affected.",
        "token": "130877018053621"
      }
    ],
    "adventure": 1
  },
  "130877018053621": {
    "kind": "episode",
    "counter": 3,
    "context": "\nWoah, so many people!\n\nMan! I'm hungry. I will go and find a butcher to ask for some free sausages.\n\n```sql\nSELECT *\nFROM inhabitant\nWHERE job = 'butcher'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "048",
    "formula": "salt_048(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant A\nWHERE job = 'butcher'",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>6</td>\n        <td>Gerry Slaughterer</td>\n        <td>2</td>\n        <td>m</td>\n        <td>butcher</td>\n        <td>4850</td>\n        <td>evil</td>\n        <td>200228709826</td>\n        <td>279073832771282</td>\n    </tr>\n    <tr>\n        <td>7</td>\n        <td>Peter Slaughterer</td>\n        <td>3</td>\n        <td>m</td>\n        <td>butcher</td>\n        <td>3250</td>\n        <td>evil</td>\n        <td>149631755589</td>\n        <td>279073832771282</td>\n    </tr>\n</table>\nTotal: 4 rows affected.",
        "token": "279073832771282"
      }
    ],
    "adventure": 1
  },
  "279073832771282": {
    "kind": "episode",
    "counter": 4,
    "context": "\n- There you are! Enjoy your meal! But take care of yourself. As long as you are unarmed, stay away from villains. Not everyone on this island is friendly.\n- Thank you, Edward!",
    "statement": "Okay, let's see who is friendly on this island...",
    "salt": "023",
    "formula": "salt_023(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Paul Bakerman</td>\n        <td>1</td>\n        <td>m</td>\n        <td>baker</td>\n        <td>850</td>\n        <td>friendly</td>\n        <td>894147374131</td>\n        <td>50980998180879</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>50980998180879</td>\n    </tr>\n</table>\nTotal: 11 rows affected.",
        "token": "50980998180879"
      }
    ],
    "adventure": 1
  },
  "50980998180879": {
    "kind": "episode",
    "counter": 5,
    "context": "\nThere is no way around getting a sword for myself. ",
    "statement": "Now try to find a friendly weaponsmith to forge you one.\n\n_Tip._ You can combine predicates in the `WHERE` clause with `AND`.",
    "salt": "060",
    "formula": "salt_060(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job = 'weaponsmith'",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>111873735423475</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "111873735423475"
      }
    ],
    "adventure": 1
  },
  "111873735423475": {
    "kind": "episode",
    "counter": 6,
    "context": "\nOh, that does not look good.",
    "statement": "Maybe other friendly smiths can help you out, e.g. a blacksmith.\n\n_Tip._ Try out: job `LIKE` '%smith' to find all inhabitants whose job ends with 'smith' (% is a wildcard for any number of characters).",
    "salt": "069",
    "formula": "salt_069(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND job LIKE '%smith'",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>71849070099607</td>\n    </tr>\n    <tr>\n        <td>10</td>\n        <td>Peter Drummer</td>\n        <td>1</td>\n        <td>m</td>\n        <td>smith</td>\n        <td>600</td>\n        <td>friendly</td>\n        <td>243111385149</td>\n        <td>71849070099607</td>\n    </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "71849070099607"
      }
    ],
    "adventure": 1
  },
  "71849070099607": {
    "kind": "episode",
    "counter": 7,
    "context": "\nThat looks better! I will go and visit those smiths.\n\n– Hi stranger! Where are you going? I'm Paul, I'm the major of Monkeycity. I will go ahead and register you as a citizen.\n\n```sql\nINSERT INTO inhabitant (name, villageid, gender, job, gold, state) VALUES ('Stranger', 1, '?', '?', 0, '?')\n```\n\n– No need to call me stranger!",
    "statement": "First, execute the `INSERT` query. Then, look for your personid.\n\n_Tip._ In former queries, the * stands for: all columns. Instead of the star, you can also address one or more columns (separated by a comma) and you will only get the columns you need.",
    "salt": "090",
    "formula": "salt_090(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');\n\n\nSELECT personid\nFROM inhabitant\nWHERE name = 'Stranger';",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>20</td>\n        <td>30525141563126</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "30525141563126"
      },
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?')",
        "result_head": "<table>\n    <tr>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "30525141563126"
      },
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?')",
        "result_head": "<table>\n    <tr>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "30525141563126"
      },
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?')",
        "result_head": "<table>\n    <tr>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "30525141563126"
      },
      {
        "query": "INSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?')",
        "result_head": "<table>\n    <tr>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "30525141563126"
      },
      {
        "query": "DELETE\nFROM inhabitant\nWHERE name = 'Stranger';\n\n\nSELECT setval('inhabitant_personid_seq', coalesce((SELECT max(personid) + 1 FROM inhabitant), 1), FALSE);\n\n\nINSERT INTO inhabitant (name, villageid, gender, job, gold, state)\nVALUES ('Stranger', 1, '?', '?', 0, '?');",
        "result_head": "<table>\n    <tr>\n    </tr>\n</table>\nTotal: 5 rows affected.",
        "token": "30525141563126"
      }
    ],
    "adventure": 1
  },
  "29469479875314": {
    "kind": "hint",
    "counter": 7,
    "text": "Oops, it seems you have executed the `INSERT` query twice or more. Cancel all these insertions with the following query: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', coalesce((SELECT max(personid) + 1 FROM inhabitant), 1), FALSE)",
    "query": "SELECT personid\n     , salt_090(sum(hash) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';"
  },
  "28936146647069": {
    "kind": "hint",
    "counter": 7,
    "text": "Oops, it seems you have executed the `INSERT` query twice or more. Cancel all these insertions with the following query: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', coalesce((SELECT max(personid) + 1 FROM inhabitant), 1), FALSE)",
    "query": "SELECT personid\n     , salt_090(sum(hash) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';"
  },
  "27750710965709": {
    "kind": "hint",
    "counter": 7,
    "text": "Oops, it seems you have executed the `INSERT` query twice or more. Cancel all these insertions with the following query: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', coalesce((SELECT max(personid) + 1 FROM inhabitant), 1), FALSE)",
    "query": "SELECT personid\n     , salt_090(sum(hash) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';"
  },
  "27856316173838": {
    "kind": "hint",
    "counter": 7,
    "text": "Oops, it seems you have executed the `INSERT` query twice or more. Cancel all these insertions with the following query: DELETE FROM inhabitant WHERE name = 'Stranger'; SELECT setval('inhabitant_personid_seq', coalesce((SELECT max(personid) + 1 FROM inhabitant), 1), FALSE)",
    "query": "SELECT personid\n     , salt_090(sum(hash) OVER ()) AS token\nFROM inhabitant\nWHERE name = 'Stranger';"
  },
  "30525141563126": {
    "kind": "episode",
    "counter": 8,
    "context": "\n\n- Hi Ernest! How much is a sword?\n- I can offer to make you a sword for 150 gold. That's the cheapest you will find!",
    "statement": "How much gold do you have?",
    "salt": "099",
    "formula": "salt_099(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT gold\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <tr>\n        <th>gold</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>8733222069916</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "8733222069916"
      }
    ],
    "adventure": 1
  },
  "8733222069916": {
    "kind": "episode",
    "counter": 9,
    "context": "\nDamn! No mon, no fun. There has to be another option to earn gold other than going to work. Maybe I could collect ownerless items and sell them!",
    "statement": "Make a list of all items that don't belong to anyone.\n\n_Tip._ You can recognize ownerless items by: WHERE owner IS NULL",
    "salt": "073",
    "formula": "salt_073(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM item\nWHERE OWNER IS NULL",
        "result_head": "<table>\n    <tr>\n        <th>item</th>\n        <th>owner</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>bucket</td>\n        <td>None</td>\n        <td>184436083777</td>\n        <td>253789061748229</td>\n    </tr>\n    <tr>\n        <td>carton</td>\n        <td>None</td>\n        <td>456410402076</td>\n        <td>253789061748229</td>\n    </tr>\n</table>\nTotal: 6 rows affected.",
        "token": "253789061748229"
      }
    ],
    "adventure": 1
  },
  "253789061748229": {
    "kind": "episode",
    "counter": 10,
    "context": "So much cool stuff!\n\nYay, a coffee cup. Let's collect it!\n\n```sql\nUPDATE item\nSET owner = 20\nWHERE item = 'coffee cup'\n```",
    "statement": "Execute the `UPDATE` query, and check the `item` table afterwards.",
    "salt": "093",
    "formula": "salt_093(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET OWNER = 20\nWHERE item = 'coffee cup';\n\n\nSELECT *\nFROM item",
        "result_head": "<table>\n    <tr>\n        <th>item</th>\n        <th>owner</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>bucket</td>\n        <td>None</td>\n        <td>184436083777</td>\n        <td>107025105236366</td>\n    </tr>\n    <tr>\n        <td>carton</td>\n        <td>None</td>\n        <td>456410402076</td>\n        <td>107025105236366</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "107025105236366"
      }
    ],
    "adventure": 1
  },
  "107025105236366": {
    "kind": "episode",
    "counter": 11,
    "context": "",
    "statement": "Do you know a trick how to collect all the ownerless items? Afterwards, list all of the items you own.",
    "salt": "033",
    "formula": "salt_033(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET OWNER = 20\nWHERE OWNER IS NULL;\n\n\nSELECT item\nFROM item\nWHERE OWNER = 20",
        "result_head": "<table>\n    <tr>\n        <th>item</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>coffee cup</td>\n        <td>139744599079637</td>\n    </tr>\n    <tr>\n        <td>bucket</td>\n        <td>139744599079637</td>\n    </tr>\n</table>\nTotal: 5 rows affected.",
        "token": "139744599079637"
      }
    ],
    "adventure": 1
  },
  "139744599079637": {
    "kind": "episode",
    "counter": 12,
    "context": "",
    "statement": "Find a friendly inhabitant who is either a dealer or a merchant. Maybe they want to buy some of your items.\n\n_Tip._ When you use both `AND` and `OR`, don't forget to put brackets correctly!",
    "salt": "024",
    "formula": "salt_024(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE state = 'friendly'\n    AND (job = 'dealer'\n         OR job = 'merchant')",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>Carl Ox</td>\n        <td>1</td>\n        <td>m</td>\n        <td>merchant</td>\n        <td>250</td>\n        <td>friendly</td>\n        <td>435957500169</td>\n        <td>166940006711685</td>\n    </tr>\n    <tr>\n        <td>12</td>\n        <td>Otto Alexander</td>\n        <td>2</td>\n        <td>m</td>\n        <td>dealer</td>\n        <td>680</td>\n        <td>friendly</td>\n        <td>461779699008</td>\n        <td>166940006711685</td>\n    </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "166940006711685"
      }
    ],
    "adventure": 1
  },
  "166940006711685": {
    "kind": "episode",
    "counter": 13,
    "context": "I'd like to get the ring and the teapot. The rest is nothing but scrap. Please give me the two items. My `personid` is 15.",
    "statement": "Afterwards, check the items that she owns.",
    "salt": "034",
    "formula": "salt_034(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE item\nSET OWNER = 15\nWHERE item = 'ring'\n    OR item = 'teapot';\n\n\nSELECT *\nFROM item\nWHERE OWNER = 15",
        "result_head": "<table>\n    <tr>\n        <th>item</th>\n        <th>owner</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>ring</td>\n        <td>15</td>\n        <td>972837695337</td>\n        <td>261661938333343</td>\n    </tr>\n    <tr>\n        <td>teapot</td>\n        <td>15</td>\n        <td>503611185415</td>\n        <td>261661938333343</td>\n    </tr>\n</table>\nTotal: 2 rows affected.",
        "token": "261661938333343"
      }
    ],
    "adventure": 1
  },
  "261661938333343": {
    "kind": "episode",
    "counter": 14,
    "context": "\n\n— Thank you! Here, some gold!",
    "statement": "Substract 120 from Helen's gold, add 120 to yours, and then check the new amounts of your two rows.",
    "salt": "091",
    "formula": "salt_091(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold - 120\nWHERE personid = 15;\n\n\nUPDATE inhabitant\nSET gold = gold + 120\nWHERE personid = 20;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid IN (15, 20)",
        "result_head": "<table>\n    <tr>\n        <th>name</th>\n        <th>gold</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>Helen Grasshead</td>\n        <td>560</td>\n        <td>33454360073749</td>\n    </tr>\n    <tr>\n        <td>Stranger</td>\n        <td>120</td>\n        <td>33454360073749</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "33454360073749"
      }
    ],
    "adventure": 1
  },
  "24023835813788": {
    "kind": "hint",
    "counter": 14,
    "text": "Restrict the result to the row of Helen (15) and yours (20).",
    "query": "SELECT name\n     , gold\n     , salt_091(sum(hash) OVER ()) AS token\nFROM inhabitant"
  },
  "33454360073749": {
    "kind": "episode",
    "counter": 15,
    "context": "Unfortunately, that's not enough gold to buy a sword. Seems like I do have to work after all. Maybe it's not a bad idea to change my name from Stranger to my real name before I will apply for a job.",
    "statement": "Update your name to 'Leslie Qualls' and show the updated row.",
    "salt": "080",
    "formula": "salt_080(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET name = 'Leslie Qualls'\nWHERE personid = 20;\n\n\nSELECT *\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>20</td>\n        <td>Leslie Qualls</td>\n        <td>1</td>\n        <td>?</td>\n        <td>?</td>\n        <td>120</td>\n        <td>?</td>\n        <td>10539358206</td>\n        <td>17693452815576</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "17693452815576"
      }
    ],
    "adventure": 1
  },
  "29110816244045": {
    "kind": "hint",
    "counter": 15,
    "text": "Restrict the result to your row (20).",
    "query": "SELECT *\n     , salt_080(sum(hash) OVER ()) AS token\nFROM inhabitant"
  },
  "17693452815576": {
    "kind": "episode",
    "counter": 16,
    "context": "",
    "statement": "Since baking is one of your hobbies, why not find a baker who you can work for?\n\n_Tip._ List all bakers and use `ORDER BY` gold to sort the results. `ORDER BY` gold `DESC` is even better because then the richest baker is on top.",
    "salt": "078",
    "formula": "salt_078(👀 + sum(hash) OVER ()) AS token",
    "tweak": "gold on the first row",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE job = 'baker'\nORDER BY gold DESC",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Paul Bakerman</td>\n        <td>1</td>\n        <td>m</td>\n        <td>baker</td>\n        <td>850</td>\n        <td>friendly</td>\n        <td>894147374131</td>\n        <td>30928237956025</td>\n    </tr>\n    <tr>\n        <td>9</td>\n        <td>Tiffany Drummer</td>\n        <td>1</td>\n        <td>f</td>\n        <td>baker</td>\n        <td>550</td>\n        <td>evil</td>\n        <td>777224738827</td>\n        <td>30928237956025</td>\n    </tr>\n</table>\nTotal: 3 rows affected.",
        "token": "30928237956025"
      }
    ],
    "adventure": 1
  },
  "30928237956025": {
    "kind": "episode",
    "counter": 17,
    "context": "Aha, Paul! I know him!\n\n– Hi, you again! I saw you want to work as a baker? Okay! You will be paid 1 gold for 100 bread rolls.\n\n(8 hours later...)\n\n– Here, I made ten thousand bread rolls! I quit! This should be enough money to buy a sword. Let's see what happens with my gold balance.\n\nHere's your new sword, Losloo Qoolls! Now you can go everywhere.",
    "statement": "Update your gold by adding your salary (100) and substracting the price of the sword (150).",
    "salt": "010",
    "formula": "salt_010(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET gold = gold + 100 - 150\nWHERE personid = 20;\n\n\nSELECT name\n     , gold\nFROM inhabitant\nWHERE personid = 20",
        "result_head": "<table>\n    <tr>\n        <th>name</th>\n        <th>gold</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>Leslie Qualls</td>\n        <td>70</td>\n        <td>156168294120120</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "156168294120120"
      }
    ],
    "adventure": 1
  },
  "156168294120120": {
    "kind": "episode",
    "counter": 18,
    "context": "\n\n– My name is Leslie qualls! Thanks anyway!",
    "statement": "Is there a pilot on this island by any chance? He could fly you home.",
    "salt": "086",
    "formula": "salt_086(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT *\nFROM inhabitant\nWHERE job = 'pilot'",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>8</td>\n        <td>Arthur Tailor</td>\n        <td>2</td>\n        <td>m</td>\n        <td>pilot</td>\n        <td>490</td>\n        <td>kidnapped</td>\n        <td>526020225000</td>\n        <td>228770217179253</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "228770217179253"
      }
    ],
    "adventure": 1
  },
  "228770217179253": {
    "kind": "episode",
    "counter": 19,
    "context": "Oh no, his state is 'kidnapped'.\n\nHorrible, the pilot is held captive by Dirty Dieter! I will show you a trick how to find out the name of the village where Dirty Dieter lives.\n\n```sql\nSELECT A.name\nFROM village A, inhabitant B\nWHERE A.villageid = B.villageid AND B.name = 'Dirty Dieter'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "029",
    "formula": "salt_029(sum(A.hash + B.hash) OVER ()) AS token",
    "solutions": [
      "The expression presented here is called a join. It combines the information of the `inhabitant` table with information of the `village` table by matching `villageid` values.",
      {
        "query": "SELECT A.name\nFROM village A, inhabitant B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Dirty Dieter'",
        "result_head": "<table>\n    <tr>\n        <th>name</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>Onionville</td>\n        <td>256500123076880</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "256500123076880"
      }
    ],
    "adventure": 1
  },
  "256500123076880": {
    "kind": "episode",
    "counter": 20,
    "context": "\n\n– Thanks for the hint!",
    "statement": "Use the join to find out the chief's name of the village Onionville.\n\n_Tip._ In the column `chief` in the village table, the `personid` of the chief is stored.",
    "salt": "045",
    "formula": "salt_045(sum(A.hash + B.hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT B.name\nFROM village A, inhabitant B\nWHERE A.chief = B.personid\n    AND A.name = 'Onionville'",
        "result_head": "<table>\n    <tr>\n        <th>name</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>Fred Dix</td>\n        <td>241491762019151</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "241491762019151"
      }
    ],
    "adventure": 1
  },
  "241491762019151": {
    "kind": "episode",
    "counter": 21,
    "context": "I've got it! I will visit Fred and ask him about Dirty Dieter and the pilot.\n\nUm, how many inhabitants does Onionville have?\n\n```sql\nSELECT COUNT(*) as population\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\nAND B.name = 'Onionville'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "012",
    "formula": "salt_012(👀 + sum(bit_xor(A.hash + B.hash)) OVER ()) AS token",
    "tweak": "this number",
    "solutions": [
      {
        "query": "SELECT count(*) AS population\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Onionville'",
        "result_head": "<table>\n    <tr>\n        <th>population</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>8</td>\n        <td>237857954360377</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "237857954360377"
      }
    ],
    "adventure": 1
  },
  "237857954360377": {
    "kind": "episode",
    "counter": 22,
    "context": "\n\n– Hello Leslie Qualls, the pilot is held captive by Dirty Dieter in his sister's house.",
    "statement": "Shall I tell you how many women there are in Onionville? Nah, you can figure it out by yourself!\n\n_Tip._ Women show up as gender = 'f'.",
    "salt": "032",
    "formula": "salt_032(👀 + sum(bit_xor(A.hash + B.hash)) OVER ()) AS token",
    "tweak": "this number",
    "solutions": [
      {
        "query": "SELECT count(*) AS women\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Onionville'\n    AND gender = 'f'",
        "result_head": "<table>\n    <tr>\n        <th>women</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>41770464086333</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "41770464086333"
      }
    ],
    "adventure": 1
  },
  "41770464086333": {
    "kind": "episode",
    "counter": 23,
    "context": "Oh, only one woman.",
    "statement": "What's her name?",
    "salt": "036",
    "formula": "salt_036(sum(A.hash + B.hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "SELECT A.name\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Onionville'\n    AND gender = 'f'",
        "result_head": "<table>\n    <tr>\n        <th>name</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>Dirty Diane</td>\n        <td>124254928334508</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "124254928334508"
      }
    ],
    "adventure": 1
  },
  "124254928334508": {
    "kind": "episode",
    "counter": 24,
    "context": "Let's go!\n\n– Leslie Qualls, if you hand me over the entire property of our nearby village Cucumbertown, I will release the pilot. I will show you now what this property consists of.\n\n```sql\nSELECT SUM(A.gold) as total\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\nAND B.name = 'Cucumbertown'\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "035",
    "formula": "salt_035(👀 + sum(bit_xor(A.hash + B.hash)) OVER ()) AS token",
    "tweak": "this sum",
    "solutions": [
      {
        "query": "SELECT sum(A.gold) AS total\nFROM inhabitant A, village B\nWHERE A.villageid = B.villageid\n    AND B.name = 'Cucumbertown'",
        "result_head": "<table>\n    <tr>\n        <th>total</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>8860</td>\n        <td>153383718990467</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "153383718990467"
      }
    ],
    "adventure": 1
  },
  "153383718990467": {
    "kind": "episode",
    "counter": 25,
    "context": "Oh no, baking bread alone can't solve my problems. If I continue working and selling items though, I could earn more gold than the worth of gold inventories of all bakers, dealers and merchants together.",
    "statement": "Sum the gold of all these people.",
    "salt": "046",
    "formula": "salt_046(👀 + sum(bit_xor(hash)) OVER ()) AS token",
    "tweak": "this sum",
    "solutions": [
      {
        "query": "SELECT sum(inhabitant.gold) AS total\nFROM inhabitant\nWHERE job IN ('baker', 'dealer', 'merchant')",
        "result_head": "<table>\n    <tr>\n        <th>total</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>4010</td>\n        <td>204304435155808</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "204304435155808"
      }
    ],
    "adventure": 1
  },
  "204304435155808": {
    "kind": "episode",
    "counter": 26,
    "context": "That's not enough.\n\nLet's have a look at how much average gold people own, depending on their job.\n\n```sql\nSELECT job, avg(gold)\nFROM inhabitant\nGROUP BY job\nORDER BY avg(gold)\n```",
    "statement": "Copy-paste the previous query, add the given formula, and execute it.",
    "salt": "071",
    "formula": "salt_071(👀 + sum(bit_xor(hash)) OVER ()) AS token",
    "tweak": "the average on the last row",
    "solutions": [
      {
        "query": "SELECT job\n     , avg(gold) AS average\nFROM inhabitant\nGROUP BY job\nORDER BY average",
        "result_head": "<table>\n    <tr>\n        <th>job</th>\n        <th>average</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>farmer</td>\n        <td>10.0000000000000000</td>\n        <td>221986332421628</td>\n    </tr>\n    <tr>\n        <td>?</td>\n        <td>70.0000000000000000</td>\n        <td>221986332421628</td>\n    </tr>\n</table>\nTotal: 11 rows affected.",
        "token": "221986332421628"
      }
    ],
    "adventure": 1
  },
  "221986332421628": {
    "kind": "episode",
    "counter": 27,
    "context": "Ok, so the only way is to mug the villains. Or I might as well go ahead and just kill Dirty Dieter with my sword!\n\n```sql\nDELETE FROM inhabitant\nWHERE name = 'Dirty Dieter'\n```",
    "statement": "Execute the previous query. Which item is now ownerless?",
    "salt": "018",
    "formula": "salt_018(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "DELETE\nFROM inhabitant\nWHERE name = 'Dirty Dieter';\n\n\nSELECT item\nFROM item\nWHERE OWNER IS NULL",
        "result_head": "<table>\n    <tr>\n        <th>item</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>cane</td>\n        <td>193891994785434</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "193891994785434"
      }
    ],
    "adventure": 1
  },
  "193891994785434": {
    "kind": "episode",
    "counter": 28,
    "context": "Dirty Diane: Heeeey! Now I'm very angry!\n\nWhat will you do next, Leslie Qualls?",
    "statement": "Delete Dirty Diane, and show the table `inhabitant`.",
    "salt": "004",
    "formula": "salt_004(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "DELETE\nFROM inhabitant\nWHERE name = 'Dirty Diane';\n\n\nSELECT *\nFROM inhabitant",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Paul Bakerman</td>\n        <td>1</td>\n        <td>m</td>\n        <td>baker</td>\n        <td>850</td>\n        <td>friendly</td>\n        <td>894147374131</td>\n        <td>66597888917702</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>66597888917702</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "66597888917702"
      }
    ],
    "adventure": 1
  },
  "66597888917702": {
    "kind": "episode",
    "counter": 29,
    "context": "\n\n– Yeah! Now I release the pilot!<br>\n– Thank's for releasing me, Leslie Qualls! I will fly you home!<br>\n– I take my sword, some gold and lots of useless items with me as a souvenir. What a big adventure!",
    "statement": "Change the pilot's status to 'friendly', your own status to 'emigrated', and show the table `inhabitant`.",
    "salt": "051",
    "formula": "salt_051(sum(hash) OVER ()) AS token",
    "solutions": [
      {
        "query": "UPDATE inhabitant\nSET state = 'emigrated'\nWHERE personid = 20;\n\n\nUPDATE inhabitant\nSET state = 'friendly'\nWHERE job = 'pilot';\n\n\nSELECT *\nFROM inhabitant;",
        "result_head": "<table>\n    <tr>\n        <th>personid</th>\n        <th>name</th>\n        <th>villageid</th>\n        <th>gender</th>\n        <th>job</th>\n        <th>gold</th>\n        <th>state</th>\n        <th>hash</th>\n        <th>token</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Paul Bakerman</td>\n        <td>1</td>\n        <td>m</td>\n        <td>baker</td>\n        <td>850</td>\n        <td>friendly</td>\n        <td>894147374131</td>\n        <td>226385040970423</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Ernest Perry</td>\n        <td>3</td>\n        <td>m</td>\n        <td>weaponsmith</td>\n        <td>280</td>\n        <td>friendly</td>\n        <td>447643847988</td>\n        <td>226385040970423</td>\n    </tr>\n</table>\nTotal: 1 rows affected.",
        "token": "226385040970423"
      }
    ],
    "adventure": 1
  },
  "226385040970423": {
    "kind": "episode",
    "counter": 30,
    "context": "You have completed SQL Island. What a big adventure!",
    "statement": "",
    "salt": "049",
    "solutions": [],
    "adventure": 1
  }
}